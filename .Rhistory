setGeneric(name="PlotRasch",
def=function(raschObj, lower=-6, upper=6, EAP=TRUE)
{standardGeneric("PlotRasch")}
)
setMethod(f="PlotRasch",
definition=function(raschObj, lower=-6, upper=6, EAP=TRUE){
theta <- seq(lower, upper, by = 0.001)
prob <- sapply(theta, function(x) exp(x - raschObj@a)/(1 + exp(x - raschObj@a)))
plot(NULL,
xlim = c(lower, upper),
ylim = c(0, 1),
xlab = "Theta",
ylab = "Probability of getting the question corect",
main = paste("Item Characteristic Curve for", raschObj@name))
sapply(1:length(raschObj@a),
function(x) lines(theta, prob[x, ], lty = 1))
if (EAP) {
abline(v = EAPRasch(raschObj, lower, upper), lty = 2)
legend("bottomright",
legend = c("Each question", "Posteriori value"),
lty = c(1, 2),
col = "black",
cex = .5)
}
}
)
PlotRasch(Trump)
Trump <- new("Rasch", name = "Trump", a = -3:3, y = c(1, 1, 0, 0, 1, 0, 1))
current.code <- as.package("easyRasch")
library(devtools)
library(roxygen2)
setwd("~/Desktop/ASP/Midterm2017")
current.code <- as.package("easyRasch")
load_all(current.code)
setGeneric(name="PlotRasch",
def=function(raschObj, lower=-6, upper=6, EAP=TRUE)
{standardGeneric("PlotRasch")}
)
setMethod(f="PlotRasch",
definition=function(raschObj, lower=-6, upper=6, EAP=TRUE){
theta <- seq(lower, upper, by = 0.001)
prob <- sapply(theta, function(x) exp(x - raschObj@a)/(1 + exp(x - raschObj@a)))
plot(NULL,
xlim = c(lower, upper),
ylim = c(0, 1),
xlab = "Theta",
ylab = "Probability of getting the question corect",
main = paste("Item Characteristic Curve for", raschObj@name))
sapply(1:length(raschObj@a),
function(x) lines(theta, prob[x, ], lty = 1))
if (EAP) {
abline(v = EAPRasch(raschObj, lower, upper), lty = 2)
legend("bottomright",
legend = c("Each question", "Posteriori value"),
lty = c(1, 2),
col = "black",
cex = .5)
}
}
)
Trump <- new("Rasch", name = "Trump", a = -3:3, y = c(1, 1, 0, 0, 1, 0, 1))
setGeneric(name="ProbRasch",
def=function(raschObj, theta)
{standardGeneric("ProbRasch")}
)
setMethod(f="ProbRasch",
definition=function(raschObj, theta){
P <- exp(theta - raschObj@a)/(1 + exp(theta - raschObj@a))
Q <- 1-P
PQ <- NULL
for (i in 1:length(raschObj@y)){
if (raschObj@y[i] == 1){
PQ[i] <- P[i]
} else {
PQ[i] <- Q[i]
}
}
return(cbind(P, PQ))
}
)
setClass(Class="Rasch",
representation = representation(
name = "character",
a = "numeric",
y = "numeric"
)
)
setMethod("initialize", "Rasch",
function(.Object, ...){
value=callNextMethod()
return(value)
}
)
Trump <- new("Rasch", name = "Trump", a = -3:3, y = c(1, 1, 0, 0, 1, 0, 1))
PlotRasch(Trump)
setGeneric(name="EAPRasch",
def=function(raschObj, lower=-6, upper=6)
{standardGeneric("EAPRasch")}
)
setMethod(f="EAPRasch",
definition=function(raschObj, lower=-6, upper=6){
int <- integrate(f = function(x) LikelihoodRasch(raschObj, x)*Prior(x),
lower = lower,
upper = upper)
return(int["value"])
}
)
PlotRasch(Trump)
setGeneric(name="LikelihoodRasch",
def=function(raschObj, theta)
{standardGeneric("LikelihoodRasch")}
)
setMethod(f="LikelihoodRasch",
definition=function(raschObj, theta){
P <- exp(theta - raschObj@a)/(1 + exp(theta - raschObj@a))
Q <- 1-P
Likelihood <- prod(P^raschObj@y * Q^(1-raschObj@y))
return(Likelihood)
}
)
PlotRasch(Trump)
setGeneric(name="Prior",
def=function(theta)
{standardGeneric("Prior")}
)
setMethod(f="Prior",
definition=function(theta){
h <- dnorm(x = theta, mean = 0, sd = 3)
return(h)
}
)
PlotRasch(Trump)
setMethod(f="PlotRasch",
definition=function(raschObj, lower=-6, upper=6, EAP=TRUE){
theta <- seq(lower, upper, by = 0.001)
prob <- sapply(theta, function(x) exp(x - raschObj@a)/(1 + exp(x - raschObj@a)))
plot(NULL,
xlim = c(lower, upper),
ylim = c(0, 1),
xlab = "Theta",
ylab = "Probability of getting the question corect",
main = paste("Item Characteristic Curve for", raschObj@name))
sapply(1:length(raschObj@a),
function(x) lines(theta, prob[x, ], lty = 1))
if (EAP) {
abline(v = EAPRasch(raschObj, lower, upper), lty = 2)
legend("bottomright",
legend = c("Each line for each question", "Posteriori value"),
lty = c(1, 2),
col = "black",
cex = .5)
} else {
legend("bottomright",
legend = "Each line for each question"
lty = 1,
col = "black",
cex = .5)
}
}
)
setMethod(f="PlotRasch",
definition=function(raschObj, lower=-6, upper=6, EAP=TRUE){
theta <- seq(lower, upper, by = 0.001)
prob <- sapply(theta, function(x) exp(x - raschObj@a)/(1 + exp(x - raschObj@a)))
plot(NULL,
xlim = c(lower, upper),
ylim = c(0, 1),
xlab = "Theta",
ylab = "Probability of getting the question corect",
main = paste("Item Characteristic Curve for", raschObj@name))
sapply(1:length(raschObj@a),
function(x) lines(theta, prob[x, ], lty = 1))
if (EAP) {
abline(v = EAPRasch(raschObj, lower, upper), lty = 2)
legend("bottomright",
legend = c("Each line for each question", "Posteriori value"),
lty = c(1, 2),
col = "black",
cex = .5)
} else {
legend("bottomright",
legend = "Each line for each question",
lty = 1,
col = "black",
cex = .5)
}
}
)
PlotRasch(Trump, EAP = FALSE)
current.code <- as.package("easyRasch")
load_all(current.code)
document(current.code)
check(current.code)
current.code <- as.package("easyRasch")
load_all(current.code)
document(current.code)
check(current.code)
PlotRasch(Trump, EAP = FALSE)
Box <- new("Rasch", name = "Box", a = rnorm(5, mean = 1, sd = 1), y = c( 1, 0, 1, 0, 1))
is.na(Box@a)
setValidity("Rasch", function(object){
test1 <- all(length(object@a) = length(object@y))
test2 <- is.na(object@a)
test3 <- is.na(object@y)
if(!test1 | !test2 | !test3){return("@Rasch is not a valid value")}
}
)
test1 <- length(object@a) = length(object@y)
setValidity("Rasch",
function(object){
test1 <- length(object@a) = length(object@y)
test2 <- is.na(object@a)
test3 <- is.na(object@y)
if(!test1 | !test2 | !test3){return("@Rasch is not a valid value")}
}
)
getValidity(Box)
Box <- new("Rasch", name = "Box", a = rnorm(5, mean = 1, sd = 1), y = c( 1, 0, 1, 0, 1))
setValidity("Rasch",
function(object){
test1 <- length(object@a) = length(object@y)
test2 <- is.na(object@a)
test3 <- is.na(object@y)
if(!test1 & test2 & test3){return("@Rasch is not a valid value")}
}
)
getValidity(Box)
Box <- new("Rasch", name = "Box", a = rnorm(5, mean = 1, sd = 1), y = c( 1, 0, 1, 0, 1))
setValidity("Rasch",
function(object){
test1 <- NULL
test1 <- length(object@a) = length(object@y)
test2 <- is.na(object@a)
test3 <- is.na(object@y)
if(!test1 & test2 & test3){return("@Rasch is not a valid value")}
}
)
Box <- new("Rasch", name = "Box", a = rnorm(5, mean = 1, sd = 1), y = c( 1, 0, 1, 0, 1))
setValidity("Rasch",
function(object){
if(is.na(object@a)){
return("The question-item parameter contains NAs")
}
}
)
Box <- new("Rasch", name = "Box", a = rnorm(5, mean = 1, sd = 1), y = c( 1, 0, 1, 0, 1))
setValidity("Rasch",
function(object){
if(sum(is.na(object@a))){
return("The question-item parameter contains NAs")
}
}
)
Box <- new("Rasch", name = "Box", a = rnorm(5, mean = 1, sd = 1), y = c( 1, 0, 1, 0, 1))
is.na(Box@a)
getValidity(Box)
setValidity("Rasch",
function(object){
if(sum(is.na(object@a))){
return("The question-item parameter contains NAs")
}
if(length(object@a) != length(object@y)){
return("a and y must be of the same length")
}
}
)
Box <- new("Rasch", name = "Box", a = rnorm(5, mean = 1, sd = 1), y = c( 1, 0, 1, 0, 1))
Box <- new("Rasch", name = "Box", a = rnorm(5, mean = 1, sd = 1), y = c( 1, 0, 0, 1))
setValidity("Rasch",
function(object){
if(sum(is.na(object@a))){
return("The question-item parameter, a, contains NAs")
}
if(sum(is.na(object@y))){
return("The answer vector, y, contains NAs")
}
if(length(object@a) != length(object@y)){
return("a and y must be of the same length")
}
}
)
Box <- new("Rasch", name = "Box", a = rnorm(5, mean = 1, sd = 1), y = c( 1, 0, 0, 1, 0))
current.code <- as.package("easyRasch")
load_all(current.code)
document(current.code)
check(current.code)
setGeneric(name="FisherTasch",
def=function(raschObj, theta)
{standardGeneric("FisherTasch")}
)
setMethod(f="FisherTasch",
definition=function(raschObj, theta){
P <- exp(theta - raschObj@a)/(1 + exp(theta - raschObj@a))
Q <- 1-P
I <- P*Q
return(I)
}
)
FisherTasch(Box)
FisherTasch(Box, 8)
FisherTasch(Box, 2)
current.code <- as.package("easyRasch")
load_all(current.code)
document(current.code)
check(current.code)
PlotRasch(Box)
Box <- new("Rasch", name = "Box", a = rnorm(5, mean = 1, sd = 1), y = c( 0, 0, 0, 1, 0))
PlotRasch(Box)
PlotRasch(Box, -4, 7)
x - raschObj@a
lower=-6, upper=6
lower=-6
upper=6
theta <- seq(lower, upper, by = 0.001)
prob <- sapply(theta, function(x) exp(x - raschObj@a)/(1 + exp(x - raschObj@a)))
raschObj <- Box
prob <- sapply(theta, function(x) exp(x - raschObj@a)/(1 + exp(x - raschObj@a)))
plot(NULL,
xlim = c(lower, upper),
ylim = c(0, 1),
xlab = "Theta",
ylab = "Probability of getting the question corect",
main = paste("Item Characteristic Curve for", raschObj@name))
sapply(1:length(raschObj@a),
function(x) lines(theta, prob[x, ], lty = 1))
PlotRasch(Box, -4, 7, EAP = FALSE)
PlotRasch(Box, -4, 7, EAP = TRUE)
PlotRasch(Trump, EAP = FALSE)
PlotRasch(Box, -4, 7, EAP = TRUE)
PlotRasch(Box, -4, 7, EAP = FALSE)
Box <- new("Rasch", name = "Box", a = rnorm(5, mean = 1, sd = 1), y = c( 0, 0, 0, 1, 0))
EAPRasch(Box)
Likelihood(Box)
LikelihoodRasch(Box)
LikelihoodRasch(Box, 4)
LikelihoodRasch(Box, 9)
Prior(4)
setMethod(f="EAPRasch",
definition=function(raschObj, lower=-6, upper=6){
int <- integrate(f = function(x) LikelihoodRasch(raschObj, x)*Prior(x),
lower = lower,
upper = upper)
return(int["value"])
}
)
EAPRasch(Box)
ProbRasch(Box)
ProbRasch(Box, 2.2)
setMethod(f="EAPRasch",
definition=function(raschObj, lower=-6, upper=6){
int <- integrate(Vectorize(f = function(x) LikelihoodRasch(raschObj, x)*Prior(x)),
lower = lower,
upper = upper)
return(int["value"])
}
)
EAPRasch(Box)
setMethod(f="EAPRasch",
definition=function(raschObj, lower=-6, upper=6){
int <- integrate(f = function(x) LikelihoodRasch(raschObj, x)*Prior(x),
lower = lower,
upper = upper)
return(int["value"])
}
)
EAPRasch(Box)
